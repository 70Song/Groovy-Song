/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 21 06:10:41 GMT 2020
 */

package org.apache.groovy.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.groovy.util.SystemUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SystemUtil_ESTest extends SystemUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = SystemUtil.getSystemPropertySafe("", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = SystemUtil.getSystemPropertySafe("", "H` ;D$'Z<' `|MW`pZ");
      assertEquals("H` ;D$'Z<' `|MW`pZ", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = SystemUtil.setSystemPropertyFromSafe("J!%");
      assertEquals("J!%", string0);
      
      String string1 = SystemUtil.getSystemPropertySafe("J!%");
      assertEquals("true", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = SystemUtil.setSystemPropertyFrom("<V.T<T@N,@U0%hgV3N=");
      assertEquals("<V.T<T@N,@U0%hgV3N", string0);
      
      String string1 = SystemUtil.getSystemPropertySafe("<V.T<T@N,@U0%hgV3N");
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Long long0 = SystemUtil.getLongSafe("", (Long) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Long long0 = new Long(1L);
      Long long1 = SystemUtil.getLongSafe("AxbjV SqZ@D3", long0);
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = SystemUtil.getLongSafe("<V.T<T@N,@U0%hgV3N=", long0);
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Long long0 = new Long((-1429L));
      Long long1 = SystemUtil.getLongSafe("", long0);
      assertEquals((-1429L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = SystemUtil.getIntegerSafe("", integer0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(27);
      Integer integer1 = SystemUtil.getIntegerSafe("X Te+S?udd`e!LT6:[;", integer0);
      assertEquals(27, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = SystemUtil.getIntegerSafe("Q", integer0);
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = SystemUtil.setSystemPropertyFromSafe("P&(jgIAE7X-A]-W");
      assertEquals("P&(jgIAE7X-A]-W", string0);
      
      boolean boolean0 = SystemUtil.getBooleanSafe("P&(jgIAE7X-A]-W");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemUtil.setSystemPropertyFromSafe("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemUtil.setSystemPropertyFromSafe((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument should not be null
         //
         verifyException("org.apache.groovy.util.SystemUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemUtil.setSystemPropertyFrom("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = SystemUtil.getSystemPropertySafe((String) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemUtil.setSystemPropertyFrom((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument should not be null
         //
         verifyException("org.apache.groovy.util.SystemUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SystemUtil systemUtil0 = new SystemUtil();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Long long0 = new Long((-1371L));
      Long long1 = SystemUtil.getLongSafe("Q", long0);
      assertEquals((-1371L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = SystemUtil.getIntegerSafe("v", (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = SystemUtil.getBooleanSafe((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = SystemUtil.getSystemPropertySafe((String) null);
      assertNull(string0);
  }
}
