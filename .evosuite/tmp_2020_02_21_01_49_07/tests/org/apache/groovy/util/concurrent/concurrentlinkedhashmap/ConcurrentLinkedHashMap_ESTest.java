/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 21 06:55:51 GMT 2020
 */

package org.apache.groovy.util.concurrent.concurrentlinkedhashmap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Iterator;
import java.util.Map;
import org.apache.groovy.util.concurrent.concurrentlinkedhashmap.ConcurrentLinkedHashMap;
import org.apache.groovy.util.concurrent.concurrentlinkedhashmap.EntryWeigher;
import org.apache.groovy.util.concurrent.concurrentlinkedhashmap.EvictionListener;
import org.apache.groovy.util.concurrent.concurrentlinkedhashmap.Weigher;
import org.apache.groovy.util.concurrent.concurrentlinkedhashmap.Weighers;
import org.codehaus.groovy.reflection.CachedMethod;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConcurrentLinkedHashMap_ESTest extends ConcurrentLinkedHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<AbstractMap.SimpleEntry<String, Object>, ConcurrentLinkedHashMap.WeightedValue<Object>> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<AbstractMap.SimpleEntry<String, Object>, ConcurrentLinkedHashMap.WeightedValue<Object>>();
      // Undeclared exception!
      try { 
        concurrentLinkedHashMap_Builder0.concurrencyLevel((-1817));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.groovy.util.concurrent.concurrentlinkedhashmap.ConcurrentLinkedHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.Node<String, Object>, ConcurrentLinkedHashMap.Node<MockThread, Object>> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.Node<String, Object>, ConcurrentLinkedHashMap.Node<MockThread, Object>>();
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.Node<String, Object>, ConcurrentLinkedHashMap.Node<MockThread, Object>> concurrentLinkedHashMap_Builder1 = concurrentLinkedHashMap_Builder0.initialCapacity(0);
      assertNotNull(concurrentLinkedHashMap_Builder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-6341));
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleEntry1, integer0);
      ConcurrentLinkedHashMap.WeightedValue<Map.Entry<Object, Integer>> concurrentLinkedHashMap_WeightedValue0 = new ConcurrentLinkedHashMap.WeightedValue<Map.Entry<Object, Integer>>(abstractMap_SimpleImmutableEntry0, (-6341));
      boolean boolean0 = concurrentLinkedHashMap_WeightedValue0.isDead();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ConcurrentLinkedHashMap.WeightedValue<MockThread> concurrentLinkedHashMap_WeightedValue0 = new ConcurrentLinkedHashMap.WeightedValue<MockThread>(mockThread0, (-1931));
      boolean boolean0 = concurrentLinkedHashMap_WeightedValue0.isAlive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = ConcurrentLinkedHashMap.ceilingNextPowerOfTwo((-1058));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConcurrentLinkedHashMap.checkState(true);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConcurrentLinkedHashMap.checkArgument(true);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConcurrentLinkedHashMap.SerializationProxy<MockThread, String> concurrentLinkedHashMap_SerializationProxy0 = null;
      try {
        concurrentLinkedHashMap_SerializationProxy0 = new ConcurrentLinkedHashMap.SerializationProxy<MockThread, String>((ConcurrentLinkedHashMap<MockThread, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.groovy.util.concurrent.concurrentlinkedhashmap.ConcurrentLinkedHashMap$SerializationProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1483);
      ConcurrentLinkedHashMap.WeightedValue<MockThread> concurrentLinkedHashMap_WeightedValue0 = new ConcurrentLinkedHashMap.WeightedValue<MockThread>((MockThread) null, (-2436));
      ConcurrentLinkedHashMap.Node<Integer, MockThread> concurrentLinkedHashMap_Node0 = new ConcurrentLinkedHashMap.Node<Integer, MockThread>(integer0, concurrentLinkedHashMap_WeightedValue0);
      ConcurrentLinkedHashMap.Node<Integer, MockThread> concurrentLinkedHashMap_Node1 = concurrentLinkedHashMap_Node0.getPrevious();
      assertNull(concurrentLinkedHashMap_Node1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(121);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>((Object) null, integer0);
      ConcurrentLinkedHashMap.WeightedValue<Map.Entry<Object, Integer>> concurrentLinkedHashMap_WeightedValue0 = new ConcurrentLinkedHashMap.WeightedValue<Map.Entry<Object, Integer>>(abstractMap_SimpleEntry0, 2048);
      ConcurrentLinkedHashMap.Node<Object, Map.Entry<Object, Integer>> concurrentLinkedHashMap_Node0 = new ConcurrentLinkedHashMap.Node<Object, Map.Entry<Object, Integer>>((Object) null, concurrentLinkedHashMap_WeightedValue0);
      ConcurrentLinkedHashMap.Node<Object, Map.Entry<Object, Integer>> concurrentLinkedHashMap_Node1 = concurrentLinkedHashMap_Node0.getNext();
      assertNull(concurrentLinkedHashMap_Node1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcurrentLinkedHashMap.DiscardingQueue concurrentLinkedHashMap_DiscardingQueue0 = new ConcurrentLinkedHashMap.DiscardingQueue();
      Object object0 = concurrentLinkedHashMap_DiscardingQueue0.poll();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConcurrentLinkedHashMap.DiscardingQueue concurrentLinkedHashMap_DiscardingQueue0 = new ConcurrentLinkedHashMap.DiscardingQueue();
      boolean boolean0 = concurrentLinkedHashMap_DiscardingQueue0.add("INSTANCE");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConcurrentLinkedHashMap.DiscardingQueue concurrentLinkedHashMap_DiscardingQueue0 = new ConcurrentLinkedHashMap.DiscardingQueue();
      ConcurrentLinkedHashMap.checkNotNull(concurrentLinkedHashMap_DiscardingQueue0);
      assertEquals(0, concurrentLinkedHashMap_DiscardingQueue0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer>();
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder1 = concurrentLinkedHashMap_Builder0.maximumWeightedCapacity(0L);
      ConcurrentLinkedHashMap<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap0 = concurrentLinkedHashMap_Builder1.build();
      ConcurrentLinkedHashMap.KeySet concurrentLinkedHashMap_KeySet0 = concurrentLinkedHashMap0.new KeySet();
      ConcurrentLinkedHashMap<Map.Entry<Object, Integer>, ConcurrentLinkedHashMap.WeightedValue<Map.Entry<Object, Integer>>> concurrentLinkedHashMap1 = concurrentLinkedHashMap_KeySet0.map;
      // Undeclared exception!
      try { 
        concurrentLinkedHashMap1.put((Map.Entry<Object, Integer>) null, (ConcurrentLinkedHashMap.WeightedValue<Map.Entry<Object, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.groovy.util.concurrent.concurrentlinkedhashmap.ConcurrentLinkedHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConcurrentLinkedHashMap.checkState(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.groovy.util.concurrent.concurrentlinkedhashmap.ConcurrentLinkedHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConcurrentLinkedHashMap.checkArgument(false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.groovy.util.concurrent.concurrentlinkedhashmap.ConcurrentLinkedHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<String, ConcurrentLinkedHashMap.Node<String, String>> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<String, ConcurrentLinkedHashMap.Node<String, String>>();
      Weighers.SingletonEntryWeigher weighers_SingletonEntryWeigher0 = Weighers.SingletonEntryWeigher.INSTANCE;
      ConcurrentLinkedHashMap.Builder<String, ConcurrentLinkedHashMap.Node<String, String>> concurrentLinkedHashMap_Builder1 = concurrentLinkedHashMap_Builder0.weigher((EntryWeigher<? super String, ? super ConcurrentLinkedHashMap.Node<String, String>>) weighers_SingletonEntryWeigher0);
      assertNotNull(concurrentLinkedHashMap_Builder1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer>();
      EvictionListener<ConcurrentLinkedHashMap.DrainStatus, Integer> evictionListener0 = (EvictionListener<ConcurrentLinkedHashMap.DrainStatus, Integer>) mock(EvictionListener.class, new ViolatedAssumptionAnswer());
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder1 = concurrentLinkedHashMap_Builder0.listener(evictionListener0);
      Weighers.SingletonWeigher weighers_SingletonWeigher0 = Weighers.SingletonWeigher.INSTANCE;
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder2 = concurrentLinkedHashMap_Builder1.weigher((Weigher<? super Integer>) weighers_SingletonWeigher0);
      assertSame(concurrentLinkedHashMap_Builder2, concurrentLinkedHashMap_Builder1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<AbstractMap.SimpleEntry<String, Object>, String> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<AbstractMap.SimpleEntry<String, Object>, String>();
      ConcurrentLinkedHashMap.Builder<AbstractMap.SimpleEntry<String, Object>, String> concurrentLinkedHashMap_Builder1 = concurrentLinkedHashMap_Builder0.concurrencyLevel(14);
      assertNotNull(concurrentLinkedHashMap_Builder1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<AbstractMap.SimpleEntry<String, Object>, String> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<AbstractMap.SimpleEntry<String, Object>, String>();
      // Undeclared exception!
      try { 
        concurrentLinkedHashMap_Builder0.concurrencyLevel(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.groovy.util.concurrent.concurrentlinkedhashmap.ConcurrentLinkedHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<CachedMethod, Integer> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<CachedMethod, Integer>();
      // Undeclared exception!
      try { 
        concurrentLinkedHashMap_Builder0.maximumWeightedCapacity((-1388L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.groovy.util.concurrent.concurrentlinkedhashmap.ConcurrentLinkedHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<String, Object> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<String, Object>();
      ConcurrentLinkedHashMap.Builder<String, Object> concurrentLinkedHashMap_Builder1 = concurrentLinkedHashMap_Builder0.initialCapacity(328);
      assertNotNull(concurrentLinkedHashMap_Builder1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<Integer, Object> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<Integer, Object>();
      // Undeclared exception!
      try { 
        concurrentLinkedHashMap_Builder0.initialCapacity((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.groovy.util.concurrent.concurrentlinkedhashmap.ConcurrentLinkedHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<CachedMethod, Integer> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<CachedMethod, Integer>();
      Weighers.SingletonEntryWeigher weighers_SingletonEntryWeigher0 = Weighers.SingletonEntryWeigher.INSTANCE;
      ConcurrentLinkedHashMap.BoundedEntryWeigher<CachedMethod, Object> concurrentLinkedHashMap_BoundedEntryWeigher0 = new ConcurrentLinkedHashMap.BoundedEntryWeigher<CachedMethod, Object>(weighers_SingletonEntryWeigher0);
      CachedMethod cachedMethod0 = mock(CachedMethod.class, new ViolatedAssumptionAnswer());
      int int0 = concurrentLinkedHashMap_BoundedEntryWeigher0.weightOf(cachedMethod0, concurrentLinkedHashMap_Builder0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Weigher<Integer> weigher0 = (Weigher<Integer>) mock(Weigher.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(weigher0).weightOf(anyInt());
      Weighers.EntryWeigherView<Object, Integer> weighers_EntryWeigherView0 = new Weighers.EntryWeigherView<Object, Integer>(weigher0);
      ConcurrentLinkedHashMap.BoundedEntryWeigher<String, Integer> concurrentLinkedHashMap_BoundedEntryWeigher0 = new ConcurrentLinkedHashMap.BoundedEntryWeigher<String, Integer>(weighers_EntryWeigherView0);
      Integer integer0 = new Integer((-2603));
      // Undeclared exception!
      try { 
        concurrentLinkedHashMap_BoundedEntryWeigher0.weightOf("org.apache.groovy.util.concurrent.concurrentlinkedhashmap.ConcurrentLinkedHashMap$WeightedValue", integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.groovy.util.concurrent.concurrentlinkedhashmap.ConcurrentLinkedHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null);
      ConcurrentLinkedHashMap.WeightedValue<MockThread> concurrentLinkedHashMap_WeightedValue0 = new ConcurrentLinkedHashMap.WeightedValue<MockThread>(mockThread0, 0);
      boolean boolean0 = concurrentLinkedHashMap_WeightedValue0.isDead();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConcurrentLinkedHashMap.WeightedValue<String> concurrentLinkedHashMap_WeightedValue0 = new ConcurrentLinkedHashMap.WeightedValue<String>("org.apache.groovy.util.concurrent.concurrentlinkedhashmap.ConcurrentLinkedHashMap$ValueIterator", 1010);
      boolean boolean0 = concurrentLinkedHashMap_WeightedValue0.isDead();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConcurrentLinkedHashMap.DiscardingQueue concurrentLinkedHashMap_DiscardingQueue0 = new ConcurrentLinkedHashMap.DiscardingQueue();
      ConcurrentLinkedHashMap.WeightedValue<Object> concurrentLinkedHashMap_WeightedValue0 = new ConcurrentLinkedHashMap.WeightedValue<Object>(concurrentLinkedHashMap_DiscardingQueue0, (-2887));
      boolean boolean0 = concurrentLinkedHashMap_WeightedValue0.isRetired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer((-582));
      ConcurrentLinkedHashMap.WeightedValue<Integer> concurrentLinkedHashMap_WeightedValue0 = new ConcurrentLinkedHashMap.WeightedValue<Integer>(integer0, 127);
      boolean boolean0 = concurrentLinkedHashMap_WeightedValue0.isRetired();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AbstractMap.SimpleEntry<MockThread, Map.Entry<Object, Integer>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<MockThread, Map.Entry<Object, Integer>>((MockThread) null, (Map.Entry<Object, Integer>) null);
      ConcurrentLinkedHashMap.WeightedValue<AbstractMap.SimpleEntry<MockThread, Map.Entry<Object, Integer>>> concurrentLinkedHashMap_WeightedValue0 = new ConcurrentLinkedHashMap.WeightedValue<AbstractMap.SimpleEntry<MockThread, Map.Entry<Object, Integer>>>(abstractMap_SimpleEntry0, 0);
      boolean boolean0 = concurrentLinkedHashMap_WeightedValue0.isAlive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("alUfJ<", "alUfJ<");
      ConcurrentLinkedHashMap.WeightedValue<AbstractMap.SimpleEntry<String, Object>> concurrentLinkedHashMap_WeightedValue0 = new ConcurrentLinkedHashMap.WeightedValue<AbstractMap.SimpleEntry<String, Object>>(abstractMap_SimpleEntry0, 0);
      Integer integer0 = new Integer((-2697));
      ConcurrentLinkedHashMap.WeightedValue<Integer> concurrentLinkedHashMap_WeightedValue1 = new ConcurrentLinkedHashMap.WeightedValue<Integer>(integer0, 0);
      boolean boolean0 = concurrentLinkedHashMap_WeightedValue0.contains(concurrentLinkedHashMap_WeightedValue1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer((-1845));
      ConcurrentLinkedHashMap.Node<Integer, Object> concurrentLinkedHashMap_Node0 = new ConcurrentLinkedHashMap.Node<Integer, Object>(integer0, (ConcurrentLinkedHashMap.WeightedValue<Object>) null);
      ConcurrentLinkedHashMap.WeightedValue<ConcurrentLinkedHashMap.Node<Integer, Object>> concurrentLinkedHashMap_WeightedValue0 = new ConcurrentLinkedHashMap.WeightedValue<ConcurrentLinkedHashMap.Node<Integer, Object>>(concurrentLinkedHashMap_Node0, 1);
      boolean boolean0 = concurrentLinkedHashMap_WeightedValue0.contains(concurrentLinkedHashMap_Node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer>();
      EvictionListener<ConcurrentLinkedHashMap.DrainStatus, Integer> evictionListener0 = (EvictionListener<ConcurrentLinkedHashMap.DrainStatus, Integer>) mock(EvictionListener.class, new ViolatedAssumptionAnswer());
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder1 = concurrentLinkedHashMap_Builder0.listener(evictionListener0);
      Weighers.SingletonWeigher weighers_SingletonWeigher0 = Weighers.SingletonWeigher.INSTANCE;
      Weighers.EntryWeigherView<Object, Object> weighers_EntryWeigherView0 = new Weighers.EntryWeigherView<Object, Object>(weighers_SingletonWeigher0);
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder2 = concurrentLinkedHashMap_Builder1.weigher((EntryWeigher<? super ConcurrentLinkedHashMap.DrainStatus, ? super Integer>) weighers_EntryWeigherView0);
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder3 = concurrentLinkedHashMap_Builder2.maximumWeightedCapacity(0L);
      ConcurrentLinkedHashMap<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap0 = concurrentLinkedHashMap_Builder3.build();
      ConcurrentLinkedHashMap.EntrySet concurrentLinkedHashMap_EntrySet0 = concurrentLinkedHashMap0.new EntrySet();
      ConcurrentLinkedHashMap<AbstractMap.SimpleEntry<String, Integer>, Object> concurrentLinkedHashMap1 = concurrentLinkedHashMap_EntrySet0.map;
      Map<AbstractMap.SimpleEntry<String, Integer>, Object> map0 = concurrentLinkedHashMap1.descendingMapWithLimit(0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer>();
      EvictionListener<ConcurrentLinkedHashMap.DrainStatus, Integer> evictionListener0 = (EvictionListener<ConcurrentLinkedHashMap.DrainStatus, Integer>) mock(EvictionListener.class, new ViolatedAssumptionAnswer());
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder1 = concurrentLinkedHashMap_Builder0.listener(evictionListener0);
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder2 = concurrentLinkedHashMap_Builder1.maximumWeightedCapacity(0L);
      ConcurrentLinkedHashMap<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap0 = concurrentLinkedHashMap_Builder2.build();
      concurrentLinkedHashMap0.clear();
      assertEquals(0L, concurrentLinkedHashMap0.capacity());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<Integer, Object> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<Integer, Object>();
      // Undeclared exception!
      try { 
        concurrentLinkedHashMap_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.groovy.util.concurrent.concurrentlinkedhashmap.ConcurrentLinkedHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<MockThread, AbstractMap.SimpleImmutableEntry<String, Integer>> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<MockThread, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      // Undeclared exception!
      try { 
        concurrentLinkedHashMap_Builder0.weigher((Weigher<? super AbstractMap.SimpleImmutableEntry<String, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.groovy.util.concurrent.concurrentlinkedhashmap.ConcurrentLinkedHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<Integer, Object> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<Integer, Object>();
      ConcurrentLinkedHashMap.Builder<Integer, Object> concurrentLinkedHashMap_Builder1 = concurrentLinkedHashMap_Builder0.maximumWeightedCapacity(3517L);
      ConcurrentLinkedHashMap<Integer, Object> concurrentLinkedHashMap0 = concurrentLinkedHashMap_Builder1.build();
      ConcurrentLinkedHashMap.EntrySet concurrentLinkedHashMap_EntrySet0 = concurrentLinkedHashMap0.new EntrySet();
      ConcurrentLinkedHashMap<Comparable<String>, ConcurrentLinkedHashMap.WeightedValue<String>> concurrentLinkedHashMap1 = concurrentLinkedHashMap_EntrySet0.map;
      // Undeclared exception!
      try { 
        concurrentLinkedHashMap1.descendingKeySetWithLimit((-2224));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.groovy.util.concurrent.concurrentlinkedhashmap.ConcurrentLinkedHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer>();
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder1 = concurrentLinkedHashMap_Builder0.maximumWeightedCapacity(0L);
      ConcurrentLinkedHashMap<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap0 = concurrentLinkedHashMap_Builder1.build();
      ConcurrentLinkedHashMap.KeySet concurrentLinkedHashMap_KeySet0 = concurrentLinkedHashMap0.new KeySet();
      ConcurrentLinkedHashMap<Map.Entry<Object, Integer>, ConcurrentLinkedHashMap.WeightedValue<Map.Entry<Object, Integer>>> concurrentLinkedHashMap1 = concurrentLinkedHashMap_KeySet0.map;
      // Undeclared exception!
      try { 
        concurrentLinkedHashMap1.ascendingMapWithLimit((-2264));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.groovy.util.concurrent.concurrentlinkedhashmap.ConcurrentLinkedHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = ConcurrentLinkedHashMap.ceilingNextPowerOfTwo(1483);
      assertEquals(2048, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = ConcurrentLinkedHashMap.readBufferIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Weighers.SingletonEntryWeigher weighers_SingletonEntryWeigher0 = Weighers.SingletonEntryWeigher.INSTANCE;
      ConcurrentLinkedHashMap.BoundedEntryWeigher<ConcurrentLinkedHashMap.WeightedValue<MockThread>, AbstractMap.SimpleImmutableEntry<MockThread, String>> concurrentLinkedHashMap_BoundedEntryWeigher0 = new ConcurrentLinkedHashMap.BoundedEntryWeigher<ConcurrentLinkedHashMap.WeightedValue<MockThread>, AbstractMap.SimpleImmutableEntry<MockThread, String>>(weighers_SingletonEntryWeigher0);
      Object object0 = concurrentLinkedHashMap_BoundedEntryWeigher0.writeReplace();
      assertSame(weighers_SingletonEntryWeigher0, object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer>();
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder1 = concurrentLinkedHashMap_Builder0.maximumWeightedCapacity(0L);
      ConcurrentLinkedHashMap<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap0 = concurrentLinkedHashMap_Builder1.build();
      ConcurrentLinkedHashMap.KeySet concurrentLinkedHashMap_KeySet0 = concurrentLinkedHashMap0.new KeySet();
      Integer integer0 = new Integer((-2830));
      concurrentLinkedHashMap0.getOrDefault(concurrentLinkedHashMap_KeySet0, integer0);
      assertEquals(0L, concurrentLinkedHashMap0.capacity());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<String, MockThread> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<String, MockThread>();
      ConcurrentLinkedHashMap.Builder<String, MockThread> concurrentLinkedHashMap_Builder1 = concurrentLinkedHashMap_Builder0.maximumWeightedCapacity(859L);
      ConcurrentLinkedHashMap<String, MockThread> concurrentLinkedHashMap0 = concurrentLinkedHashMap_Builder1.build();
      ConcurrentLinkedHashMap.Values concurrentLinkedHashMap_Values0 = concurrentLinkedHashMap0.new Values();
      concurrentLinkedHashMap_Values0.size();
      assertEquals(859L, concurrentLinkedHashMap0.capacity());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer>();
      EvictionListener<ConcurrentLinkedHashMap.DrainStatus, Integer> evictionListener0 = (EvictionListener<ConcurrentLinkedHashMap.DrainStatus, Integer>) mock(EvictionListener.class, new ViolatedAssumptionAnswer());
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder1 = concurrentLinkedHashMap_Builder0.listener(evictionListener0);
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder2 = concurrentLinkedHashMap_Builder1.maximumWeightedCapacity(0L);
      ConcurrentLinkedHashMap<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap0 = concurrentLinkedHashMap_Builder2.build();
      ConcurrentLinkedHashMap.EntrySet concurrentLinkedHashMap_EntrySet0 = concurrentLinkedHashMap0.new EntrySet();
      ConcurrentLinkedHashMap<AbstractMap.SimpleEntry<String, Integer>, Object> concurrentLinkedHashMap1 = concurrentLinkedHashMap_EntrySet0.map;
      concurrentLinkedHashMap1.descendingMapWithLimit(0);
      assertEquals(0L, concurrentLinkedHashMap1.capacity());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<Integer, Object> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<Integer, Object>();
      ConcurrentLinkedHashMap.Builder<Integer, Object> concurrentLinkedHashMap_Builder1 = concurrentLinkedHashMap_Builder0.maximumWeightedCapacity(3517L);
      ConcurrentLinkedHashMap<Integer, Object> concurrentLinkedHashMap0 = concurrentLinkedHashMap_Builder1.build();
      ConcurrentLinkedHashMap.EntrySet concurrentLinkedHashMap_EntrySet0 = concurrentLinkedHashMap0.new EntrySet();
      ConcurrentLinkedHashMap<ConcurrentLinkedHashMap.DrainStatus, Comparable<Object>> concurrentLinkedHashMap1 = concurrentLinkedHashMap_EntrySet0.map;
      concurrentLinkedHashMap1.toString();
      assertEquals(3517L, concurrentLinkedHashMap1.capacity());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer>();
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder1 = concurrentLinkedHashMap_Builder0.maximumWeightedCapacity(0L);
      ConcurrentLinkedHashMap<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap0 = concurrentLinkedHashMap_Builder1.build();
      ConcurrentLinkedHashMap.KeySet concurrentLinkedHashMap_KeySet0 = concurrentLinkedHashMap0.new KeySet();
      ConcurrentLinkedHashMap<Map.Entry<Object, Integer>, ConcurrentLinkedHashMap.WeightedValue<Map.Entry<Object, Integer>>> concurrentLinkedHashMap1 = concurrentLinkedHashMap_KeySet0.map;
      Object object0 = concurrentLinkedHashMap1.writeReplace();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConcurrentLinkedHashMap.DiscardingQueue concurrentLinkedHashMap_DiscardingQueue0 = new ConcurrentLinkedHashMap.DiscardingQueue();
      int int0 = concurrentLinkedHashMap_DiscardingQueue0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConcurrentLinkedHashMap.DiscardingQueue concurrentLinkedHashMap_DiscardingQueue0 = new ConcurrentLinkedHashMap.DiscardingQueue();
      Integer integer0 = new Integer((-1));
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(concurrentLinkedHashMap_DiscardingQueue0, integer0);
      boolean boolean0 = concurrentLinkedHashMap_DiscardingQueue0.offer(abstractMap_SimpleImmutableEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConcurrentLinkedHashMap.DiscardingQueue concurrentLinkedHashMap_DiscardingQueue0 = new ConcurrentLinkedHashMap.DiscardingQueue();
      Iterator<Object> iterator0 = concurrentLinkedHashMap_DiscardingQueue0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConcurrentLinkedHashMap.DiscardingQueue concurrentLinkedHashMap_DiscardingQueue0 = new ConcurrentLinkedHashMap.DiscardingQueue();
      Object object0 = concurrentLinkedHashMap_DiscardingQueue0.peek();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer>();
      ConcurrentLinkedHashMap.Builder<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap_Builder1 = concurrentLinkedHashMap_Builder0.maximumWeightedCapacity(0L);
      ConcurrentLinkedHashMap<ConcurrentLinkedHashMap.DrainStatus, Integer> concurrentLinkedHashMap0 = concurrentLinkedHashMap_Builder1.build();
      ConcurrentLinkedHashMap.KeySet concurrentLinkedHashMap_KeySet0 = concurrentLinkedHashMap0.new KeySet();
      ConcurrentLinkedHashMap<Map.Entry<Object, Integer>, ConcurrentLinkedHashMap.WeightedValue<Map.Entry<Object, Integer>>> concurrentLinkedHashMap1 = concurrentLinkedHashMap_KeySet0.map;
      Integer integer0 = new Integer((-2830));
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(integer0, integer0);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleEntry0);
      ConcurrentLinkedHashMap.WeightedValue<Map.Entry<Object, Integer>> concurrentLinkedHashMap_WeightedValue0 = new ConcurrentLinkedHashMap.WeightedValue<Map.Entry<Object, Integer>>(abstractMap_SimpleImmutableEntry0, 14);
      concurrentLinkedHashMap1.put(abstractMap_SimpleEntry0, concurrentLinkedHashMap_WeightedValue0);
      assertEquals(0L, concurrentLinkedHashMap1.weightedSize());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer integer0 = new Integer((-2334));
      MockThread mockThread0 = new MockThread();
      ConcurrentLinkedHashMap.WeightedValue<MockThread> concurrentLinkedHashMap_WeightedValue0 = new ConcurrentLinkedHashMap.WeightedValue<MockThread>(mockThread0, (-174));
      ConcurrentLinkedHashMap.Node<Integer, MockThread> concurrentLinkedHashMap_Node0 = new ConcurrentLinkedHashMap.Node<Integer, MockThread>(integer0, concurrentLinkedHashMap_WeightedValue0);
      ConcurrentLinkedHashMap.WeightedValue<MockThread> concurrentLinkedHashMap_WeightedValue1 = concurrentLinkedHashMap_Node0.getWeightedValue();
      assertNotNull(concurrentLinkedHashMap_WeightedValue1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConcurrentLinkedHashMap.Builder<Integer, Object> concurrentLinkedHashMap_Builder0 = new ConcurrentLinkedHashMap.Builder<Integer, Object>();
      ConcurrentLinkedHashMap.Builder<Integer, Object> concurrentLinkedHashMap_Builder1 = concurrentLinkedHashMap_Builder0.maximumWeightedCapacity(3517L);
      ConcurrentLinkedHashMap<Integer, Object> concurrentLinkedHashMap0 = concurrentLinkedHashMap_Builder1.build();
      ConcurrentLinkedHashMap.EntrySet concurrentLinkedHashMap_EntrySet0 = concurrentLinkedHashMap0.new EntrySet();
      ConcurrentLinkedHashMap.WeightedValue<String> concurrentLinkedHashMap_WeightedValue0 = new ConcurrentLinkedHashMap.WeightedValue<String>("{F6", (-2224));
      AbstractMap.SimpleImmutableEntry<Comparable<String>, ConcurrentLinkedHashMap.WeightedValue<String>> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Comparable<String>, ConcurrentLinkedHashMap.WeightedValue<String>>("{}", concurrentLinkedHashMap_WeightedValue0);
      boolean boolean0 = concurrentLinkedHashMap_EntrySet0.add((Map.Entry<Comparable<String>, ConcurrentLinkedHashMap.WeightedValue<String>>) abstractMap_SimpleImmutableEntry0);
      assertEquals(1L, concurrentLinkedHashMap0.weightedSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Integer integer0 = new Integer((-1531));
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      AbstractMap.SimpleEntry<Integer, MockThread> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, MockThread>(integer0, mockThread0);
      ConcurrentLinkedHashMap.WeightedValue<Object> concurrentLinkedHashMap_WeightedValue0 = new ConcurrentLinkedHashMap.WeightedValue<Object>(mockThread0, (-1531));
      ConcurrentLinkedHashMap.Node<Map.Entry<Integer, MockThread>, Object> concurrentLinkedHashMap_Node0 = new ConcurrentLinkedHashMap.Node<Map.Entry<Integer, MockThread>, Object>(abstractMap_SimpleEntry0, concurrentLinkedHashMap_WeightedValue0);
      MockThread mockThread1 = (MockThread)concurrentLinkedHashMap_Node0.getValue();
      assertEquals(0, mockThread1.countStackFrames());
  }
}
